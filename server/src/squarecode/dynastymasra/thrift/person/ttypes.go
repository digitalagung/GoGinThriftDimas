// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package person

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

type Timestamp string

func TimestampPtr(v Timestamp) *Timestamp { return &v }

// Attributes:
//  - ID
//  - Identity
//  - Firstname
//  - Middlename
//  - Lastname
//  - Address
//  - Age
//  - Active
//  - Created
type Person struct {
	ID         int64   `thrift:"ID,1,required" json:"ID"`
	Identity   string  `thrift:"Identity,2,required" json:"Identity"`
	Firstname  string  `thrift:"Firstname,3,required" json:"Firstname"`
	Middlename *string `thrift:"Middlename,4" json:"Middlename,omitempty"`
	Lastname   *string `thrift:"Lastname,5" json:"Lastname,omitempty"`
	Address    string  `thrift:"Address,6,required" json:"Address"`
	Age        *int32  `thrift:"Age,7" json:"Age,omitempty"`
	Active     bool    `thrift:"Active,8,required" json:"Active"`
	Created    string  `thrift:"Created,9,required" json:"Created"`
}

func NewPerson() *Person {
	return &Person{}
}

func (p *Person) GetID() int64 {
	return p.ID
}

func (p *Person) GetIdentity() string {
	return p.Identity
}

func (p *Person) GetFirstname() string {
	return p.Firstname
}

var Person_Middlename_DEFAULT string

func (p *Person) GetMiddlename() string {
	if !p.IsSetMiddlename() {
		return Person_Middlename_DEFAULT
	}
	return *p.Middlename
}

var Person_Lastname_DEFAULT string

func (p *Person) GetLastname() string {
	if !p.IsSetLastname() {
		return Person_Lastname_DEFAULT
	}
	return *p.Lastname
}

func (p *Person) GetAddress() string {
	return p.Address
}

var Person_Age_DEFAULT int32

func (p *Person) GetAge() int32 {
	if !p.IsSetAge() {
		return Person_Age_DEFAULT
	}
	return *p.Age
}

func (p *Person) GetActive() bool {
	return p.Active
}

func (p *Person) GetCreated() string {
	return p.Created
}
func (p *Person) IsSetMiddlename() bool {
	return p.Middlename != nil
}

func (p *Person) IsSetLastname() bool {
	return p.Lastname != nil
}

func (p *Person) IsSetAge() bool {
	return p.Age != nil
}

func (p *Person) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	var issetID bool = false
	var issetIdentity bool = false
	var issetFirstname bool = false
	var issetAddress bool = false
	var issetActive bool = false
	var issetCreated bool = false

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
			issetID = true
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
			issetIdentity = true
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
			issetFirstname = true
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
			issetAddress = true
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
			issetActive = true
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
			issetCreated = true
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	if !issetID {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field ID is not set"))
	}
	if !issetIdentity {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Identity is not set"))
	}
	if !issetFirstname {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Firstname is not set"))
	}
	if !issetAddress {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Address is not set"))
	}
	if !issetActive {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Active is not set"))
	}
	if !issetCreated {
		return thrift.NewTProtocolExceptionWithType(thrift.INVALID_DATA, fmt.Errorf("Required field Created is not set"))
	}
	return nil
}

func (p *Person) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *Person) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Identity = v
	}
	return nil
}

func (p *Person) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.Firstname = v
	}
	return nil
}

func (p *Person) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Middlename = &v
	}
	return nil
}

func (p *Person) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 5: ", err)
	} else {
		p.Lastname = &v
	}
	return nil
}

func (p *Person) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 6: ", err)
	} else {
		p.Address = v
	}
	return nil
}

func (p *Person) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 7: ", err)
	} else {
		p.Age = &v
	}
	return nil
}

func (p *Person) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return thrift.PrependError("error reading field 8: ", err)
	} else {
		p.Active = v
	}
	return nil
}

func (p *Person) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 9: ", err)
	} else {
		p.Created = v
	}
	return nil
}

func (p *Person) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Person"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Person) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ID", thrift.I64, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ID: ", p), err)
	}
	if err := oprot.WriteI64(int64(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.ID (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ID: ", p), err)
	}
	return err
}

func (p *Person) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Identity", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:Identity: ", p), err)
	}
	if err := oprot.WriteString(string(p.Identity)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Identity (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:Identity: ", p), err)
	}
	return err
}

func (p *Person) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Firstname", thrift.STRING, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Firstname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Firstname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Firstname (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Firstname: ", p), err)
	}
	return err
}

func (p *Person) writeField4(oprot thrift.TProtocol) (err error) {
	if p.IsSetMiddlename() {
		if err := oprot.WriteFieldBegin("Middlename", thrift.STRING, 4); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:Middlename: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Middlename)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Middlename (4) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 4:Middlename: ", p), err)
		}
	}
	return err
}

func (p *Person) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetLastname() {
		if err := oprot.WriteFieldBegin("Lastname", thrift.STRING, 5); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:Lastname: ", p), err)
		}
		if err := oprot.WriteString(string(*p.Lastname)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Lastname (5) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 5:Lastname: ", p), err)
		}
	}
	return err
}

func (p *Person) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Address", thrift.STRING, 6); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:Address: ", p), err)
	}
	if err := oprot.WriteString(string(p.Address)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Address (6) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 6:Address: ", p), err)
	}
	return err
}

func (p *Person) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetAge() {
		if err := oprot.WriteFieldBegin("Age", thrift.I32, 7); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:Age: ", p), err)
		}
		if err := oprot.WriteI32(int32(*p.Age)); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T.Age (7) field write error: ", p), err)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T write field end error 7:Age: ", p), err)
		}
	}
	return err
}

func (p *Person) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Active", thrift.BOOL, 8); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:Active: ", p), err)
	}
	if err := oprot.WriteBool(bool(p.Active)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Active (8) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 8:Active: ", p), err)
	}
	return err
}

func (p *Person) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Created", thrift.STRING, 9); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:Created: ", p), err)
	}
	if err := oprot.WriteString(string(p.Created)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.Created (9) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 9:Created: ", p), err)
	}
	return err
}

func (p *Person) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Person(%+v)", *p)
}
